@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}
//example: @include input-placeholder { color: #ababab; }

@function rem($x) {
  @return ($x / 16) * 1rem;
}

@function color-opacity($color, $background-color, $opacity) {
  $r1: red($color);
  $g1: green($color);
  $b1: blue($color);
  $r2: red($background-color);
  $g2: green($background-color);
  $b2: blue($background-color);
  $rgb: rgb((1 - $opacity)*$r1 + $opacity * $r2, (1 - $opacity)*$g1 + $opacity*$g2, (1 - $opacity)*$b1 + $opacity * $b2);
  @return $rgb
}
/*The formula for combining C1 = (R1,G1,B1) and C2 = (R2,G2,B2) into a new color C3, where C2 is overlayed on top of C1 with opacity p is usually ( (1-p)R1 + p*R2, (1-p)*G1 + p*G2, (1-p)*B1 + p*B2 ).
See Wikipedia article on transparency for more information.*/
//http://stackoverflow.com/questions/8743482/calculating-opacity-value-mathematically
//http://thesassway.com/advanced/pure-sass-functions
//http://stackoverflow.com/questions/10929458/sass-converting-hex-to-rgba-for-background-opacity
